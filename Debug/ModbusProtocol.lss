
ModbusProtocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000344  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00802000  00802000  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000394c  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033d5  00000000  00000000  00003dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f3  00000000  00000000  00007191  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00007784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026a7  00000000  00000000  000077f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000013  00000000  00000000  00009e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00009eb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	a8 31       	cpi	r26, 0x18	; 24
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 99 01 	call	0x332	; 0x332 <main>
 220:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <usart_setup>:

void usart_setup(void)
{
	//1 start bit, 7 bits, odd parity, 1 stop bit, 9600 baud rate
	
	PORTF.OUTSET = PIN3_bm;			//Set TxF0 pin High
 228:	e0 ea       	ldi	r30, 0xA0	; 160
 22a:	f6 e0       	ldi	r31, 0x06	; 6
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN3_bm;			// PF3 (TXF0) as output.
 230:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRCLR = PIN2_bm;			// PF2 (RXF0) as input.
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	82 83       	std	Z+2, r24	; 0x02
	USARTF0.CTRLA=0;
 236:	e0 ea       	ldi	r30, 0xA0	; 160
 238:	fb e0       	ldi	r31, 0x0B	; 11
 23a:	13 82       	std	Z+3, r1	; 0x03
	USARTF0_CTRLB = 0x18; //Transmit, Recive enable
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	80 93 a4 0b 	sts	0x0BA4, r24	; 0x800ba4 <__TEXT_REGION_LENGTH__+0x7deba4>
			Asinhroni, odd, 1 stop, 7 bita
			Asinhroni, even, 2 stop, 7 bita
			Asinhroni, even, 1 stop, 8 bita

	*/
	USARTF0_CTRLC = 0x03; //Asinhroni, no parity, 8 bita, 1 stop bit
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	80 93 a5 0b 	sts	0x0BA5, r24	; 0x800ba5 <__TEXT_REGION_LENGTH__+0x7deba5>

	//Baud rate setup
	USARTF0.BAUDCTRLB = 0x00; //BScale = 0
 248:	17 82       	std	Z+7, r1	; 0x07
	USARTF0.BAUDCTRLA=13; //BSel = 13	
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	86 83       	std	Z+6, r24	; 0x06
 24e:	08 95       	ret

00000250 <clock_setup>:
void clock_setup(void)
{
	//32Mhz / 16 = 2Mhz clock

	//Disable all clock sources
	OSC_CTRL = 0x00;
 250:	e0 e5       	ldi	r30, 0x50	; 80
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	10 82       	st	Z, r1
	//Enable the internal 32.768 kHz RC oscillator
	OSC_CTRL = 0x04; //Enable RC32k
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	80 83       	st	Z, r24
	//Wait for the internal 32.768 kHz RC oscillator to stabilize
	while(!(OSC_STATUS & OSC_RC32KRDY_bm));
 25a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 25e:	82 ff       	sbrs	r24, 2
 260:	fc cf       	rjmp	.-8      	; 0x25a <clock_setup+0xa>
	//Enable the internal 32 MHz RC oscillator
	CLK_CTRL = 0x01;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
	//Disable protected IOs to update settings
	CPU_CCP = 0xD8;
 268:	98 ed       	ldi	r25, 0xD8	; 216
 26a:	94 bf       	out	0x34, r25	; 52
	//Configure prescalar
	CLK_PSCTRL = 0x1C;  //32MHz devide with 16
 26c:	9c e1       	ldi	r25, 0x1C	; 28
 26e:	90 93 41 00 	sts	0x0041, r25	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>
	//Configure DFLL for calibration
	OSC_DFLLCTRL = 0x00;
 272:	10 92 56 00 	sts	0x0056, r1	; 0x800056 <__TEXT_REGION_LENGTH__+0x7de056>
	DFLLRC32M_CTRL = 0x01;
 276:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7de060>
	//Wait for the internal 32 MHz RC oscillator to stabilize
	while(!(OSC_STATUS & OSC_RC32MEN_bm));
 27a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 27e:	81 ff       	sbrs	r24, 1
 280:	fc cf       	rjmp	.-8      	; 0x27a <clock_setup+0x2a>
	//Disable protected IOs to update settings
	CPU_CCP = 0xD8;
 282:	88 ed       	ldi	r24, 0xD8	; 216
 284:	84 bf       	out	0x34, r24	; 52
	//Select system clock source
	CLK_CTRL = 0x01;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
 28c:	08 95       	ret

0000028e <recive_data>:

}

void recive_data(uint8_t data)
{
	if(data == ':')
 28e:	8a 33       	cpi	r24, 0x3A	; 58
 290:	59 f4       	brne	.+22     	; 0x2a8 <recive_data+0x1a>
	{
		i = 0;
 292:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
		dataRecived = 0;
 296:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <dataRecived>
		modbusDataPok = modbusData;
 29a:	24 e0       	ldi	r18, 0x04	; 4
 29c:	30 e2       	ldi	r19, 0x20	; 32
 29e:	20 93 01 20 	sts	0x2001, r18	; 0x802001 <modbusDataPok>
 2a2:	30 93 02 20 	sts	0x2002, r19	; 0x802002 <modbusDataPok+0x1>
 2a6:	0e c0       	rjmp	.+28     	; 0x2c4 <recive_data+0x36>
	}

	else if(data == 10)
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	61 f4       	brne	.+24     	; 0x2c4 <recive_data+0x36>
	{
		dataRecived = 1;
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <dataRecived>
		modbusData[i] =  data;
 2b2:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ec 5f       	subi	r30, 0xFC	; 252
 2ba:	ff 4d       	sbci	r31, 0xDF	; 223
 2bc:	80 83       	st	Z, r24
		i = 0;
 2be:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
		return;
 2c2:	08 95       	ret
	}

	modbusData[i] = data;
 2c4:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2c8:	e9 2f       	mov	r30, r25
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ec 5f       	subi	r30, 0xFC	; 252
 2ce:	ff 4d       	sbci	r31, 0xDF	; 223
 2d0:	80 83       	st	Z, r24
	i++;
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
 2d4:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__DATA_REGION_ORIGIN__>
 2d8:	08 95       	ret

000002da <send_data>:
}

void send_data()
{
	if(dataRecived == 1)
 2da:	80 91 03 20 	lds	r24, 0x2003	; 0x802003 <dataRecived>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	b9 f4       	brne	.+46     	; 0x310 <send_data+0x36>
	{
		if(*modbusDataPok != 10)
 2e2:	e0 91 01 20 	lds	r30, 0x2001	; 0x802001 <modbusDataPok>
 2e6:	f0 91 02 20 	lds	r31, 0x2002	; 0x802002 <modbusDataPok+0x1>
 2ea:	80 81       	ld	r24, Z
 2ec:	8a 30       	cpi	r24, 0x0A	; 10
 2ee:	61 f0       	breq	.+24     	; 0x308 <send_data+0x2e>
		{
			USARTF0.DATA = *modbusDataPok;
 2f0:	80 93 a0 0b 	sts	0x0BA0, r24	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7deba0>
			modbusDataPok++;
 2f4:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <modbusDataPok>
 2f8:	90 91 02 20 	lds	r25, 0x2002	; 0x802002 <modbusDataPok+0x1>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <modbusDataPok>
 302:	90 93 02 20 	sts	0x2002, r25	; 0x802002 <modbusDataPok+0x1>
 306:	08 95       	ret
		}
		else
		{
			USARTF0.DATA = *modbusDataPok;
 308:	80 93 a0 0b 	sts	0x0BA0, r24	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7deba0>
			dataRecived = 0;
 30c:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <dataRecived>
 310:	08 95       	ret

00000312 <usart_rx_tx>:

void usart_rx_tx(void)
{
	uint8_t recived = 0;

	while(!(USARTF0.STATUS & USART_RXCIF_bm));
 312:	80 91 a1 0b 	lds	r24, 0x0BA1	; 0x800ba1 <__TEXT_REGION_LENGTH__+0x7deba1>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <usart_rx_tx>
	
	recived = USARTF0.DATA;
 31a:	80 91 a0 0b 	lds	r24, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7deba0>
	recive_data(recived);
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 47 01 	call	0x28e	; 0x28e <recive_data>

	while(!(USARTF0.STATUS & USART_DREIF_bm));
 324:	80 91 a1 0b 	lds	r24, 0x0BA1	; 0x800ba1 <__TEXT_REGION_LENGTH__+0x7deba1>
 328:	85 ff       	sbrs	r24, 5
 32a:	fc cf       	rjmp	.-8      	; 0x324 <usart_rx_tx+0x12>

	send_data();
 32c:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
 330:	08 95       	ret

00000332 <main>:
	}
}

int main(void)
{
	clock_setup();
 332:	0e 94 28 01 	call	0x250	; 0x250 <clock_setup>
    usart_setup();
 336:	0e 94 14 01 	call	0x228	; 0x228 <usart_setup>

    while (1) 
    {
		usart_rx_tx();
 33a:	0e 94 89 01 	call	0x312	; 0x312 <usart_rx_tx>
 33e:	fd cf       	rjmp	.-6      	; 0x33a <main+0x8>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
